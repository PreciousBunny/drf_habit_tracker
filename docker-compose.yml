version: '3.9'

services:
  db:
    image: postgres:14.7-alpine
    restart: always
    container_name: db
    healthcheck:
      test: [ 'CMD-SHELL', 'pg_isready -U postgres' ]
      interval: 5s
      timeout: 5s
      retries: 5
    expose:
      - '5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./.env.docker
    env_file:
      - ./.env

  api:
    build: .
    container_name: api
    command: >
      bash -c "python manage.py collectstatic --noinput
      && python manage.py makemigrations
      && python manage.py migrate
      && python manage.py runserver 0.0.0.0:8000"
    ports:
      - "8000:8000"
    volumes:
      - .:/app
      - ./.env:/app/.env
    env_file:
      - ./.env
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy

  redis:
    image: redis:alpine
    command: redis-server --save 20 1 --loglevel warning
    container_name: redis
    healthcheck:
      test: [ 'CMD-SHELL', 'redis-cli ping | grep PONG' ]
      interval: 5s
      timeout: 5s
      retries: 5
    volumes:
      - ./data/cache:/data
    ports:
      - "6379:6379"
    restart: always

  celery:
    build: .
    container_name: celery
    command: >
      bash -c "celery -A config worker -l INFO"
    volumes:
      - ./.env:/app/.env
      - .:/app
    links:
      - redis
    restart: always
    depends_on:
      - db
      - redis
      - api

  celery-beat:
    build: .
    container_name: celery-beat
    command: >
      bash -c "sleep 30 && celery -A config beat -l info"
    volumes:
      - ./.env:/app/.env
      - .:/app
    restart: always
    depends_on:
      - celery
      - api



volumes:
  postgres_data: